{
  "id": "org.wso2.carbon.inbound.cdc.CDCPollingConsumer",
  "name": "debeziumInbound",
  "type": "inbound-connector",
  "title": "Debezium CDC Connector",
  "help": "Configure the Debezium connector to capture change events from the specified database.",
  "elements": [
    {
      "type": "attributeGroup",
      "value": {
        "groupName": "Generic",
        "elements": [
          {
            "type": "attribute",
            "value": {
              "name": "name",
              "displayName": "Inbound Endpoint Name",
              "inputType": "string",
              "required": "true",
              "helpTip": "Unique identifier for the CDC inbound endpoint."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "class",
              "displayName": "Class Name",
              "inputType": "string",
              "required": "true",
              "hidden": true,
              "defaultValue": "org.wso2.carbon.inbound.cdc.CDCPollingConsumer"
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "sequence",
              "displayName": "Injecting Sequence Name",
              "inputType": "string",
              "required": "true",
              "helpTip": "Sequence to inject the CDC message"
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "onError",
              "displayName": "Error Sequence Name",
              "inputType": "string",
              "required": "true",
              "helpTip": "Error sequence to invoke on fault"
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "suspend",
              "displayName": "Suspend Inbound",
              "inputType": "checkbox",
              "defaultValue": false,
              "hidden": true,
              "required": "false",
              "helpTip": "Suspend Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "attributeGroup",
      "value": {
        "groupName": "Inbound Functional",
        "elements": [
          {
            "type": "attribute",
            "value": {
              "name": "interval",
              "displayName": "Polling interval",
              "inputType": "string",
              "required": "true",
              "helpTip": "The polling interval for the CDC inbound endpoint."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "sequential",
              "displayName": "Execute sequentially",
              "inputType": "checkbox",
              "defaultValue": true,
              "required": "false",
              "helpTip": "The behaviour when executing the given sequence."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "coordination",
              "displayName": "Coordination",
              "inputType": "checkbox",
              "defaultValue": true,
              "required": "false",
              "helpTip": "In a clustered setup, this will run the inbound only in a single worker node."
            }
          }
        ]
      }
    },
    {
      "type": "attributeGroup",
      "value": {
        "groupName": "CDC Basic",
        "elements": [
          {
            "type": "attribute",
            "value": {
              "name": "name",
              "displayName": "Name",
              "inputType": "string",
              "required": "true",
              "helpTip": ""
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "snapshot.mode",
              "displayName": "Snapshot Mode",
              "inputType": "string",
              "required": "false",
              "defaultValue": "initial",
              "helpTip": "Specifies the criteria for running a snapshot when the connector starts. Possible settings are: initial, initial_only, when_needed, never, schema_only, schema_only_recovery."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "connector.class",
              "displayName": "Connector Class",
              "inputType": "string",
              "required": "true",
              "helpTip": "The name of the Java class for the connector. Example: For MySQL database, io.debezium.connector.mysql.MySqlConnector"
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "topic.prefix",
              "displayName": "Topic Prefix",
              "inputType": "string",
              "required": "true",
              "helpTip": "Topic prefix that provides a namespace for the database server that you want Debezium to capture. The prefix should be unique across all other connectors, since it is used as the prefix for all Kafka topic names that receive records from this connector. Only alphanumeric characters, hyphens, dots, and underscores must be used in the database server logical name."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "schema.history.internal",
              "displayName": "Schema History Internal",
              "inputType": "string",
              "required": "false",
              "defaultValue": "KafkaSchemaHistory",
              "helpTip": "The name of the Java class that is responsible for persistence of the database schema history. It must implement <…>.SchemaHistory interface."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "schema.history.internal.file.filename",
              "displayName": "Schema History Internal File Filename",
              "inputType": "string",
              "required": "false",
              "helpTip": "This value is required only if io.debezium.storage.file.history.FileSchemaHistory was provided for the schema.history.internal value. You need to specify the path to a file where the database schema history is stored. By default, the file will be stored in the <Product home>/cdc/schemaHistory directory."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "schema.history.internal.kafka.topic",
              "displayName": "Schema History Internal Kafka Topic",
              "inputType": "string",
              "required": "false",
              "helpTip": "The Kafka topic where the database schema history is stored. Required when schema.history.internal is set to the <…>.KafkaSchemaHistory."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "schema.history.internal.kafka.bootstrap.servers",
              "displayName": "Schema History Internal Kafka Bootstrap Servers",
              "inputType": "string",
              "required": "false",
              "helpTip": "The initial list of Kafka cluster servers to connect to. The cluster provides the topic to store the database schema history. Required when schema.history.internal is set to the <…>.KafkaSchemaHistory."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "offset.storage",
              "displayName": "Offset Storage",
              "inputType": "string",
              "required": "false",
              "helpTip": "The name of the Java class that is responsible for persistence of connector offsets. It must implement <…>.OffsetBackingStore interface."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "offset.storage.file.filename",
              "displayName": "Offset Storage File Filename",
              "inputType": "string",
              "required": "false",
              "helpTip": "Path to file where offsets are to be stored. Required when offset.storage is set to the <…>.FileOffsetBackingStore. By default, the file will be stored in the <Product home>/cdc/offsetStorage directory."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "offset.storage.topic",
              "displayName": "Offset Storage Topic",
              "inputType": "string",
              "required": "false",
              "helpTip": "The name of the Kafka topic where offsets are to be stored. Required when offset.storage is set to the <…>.KafkaOffsetBackingStore."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "offset.storage.partitions",
              "displayName": "Offset Storage Partitions",
              "inputType": "string",
              "required": "false",
              "helpTip": "The number of partitions used when creating the offset storage topic. Required when offset.storage is set to the <…>.KafkaOffsetBackingStore."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "offset.storage.replication.factor",
              "displayName": "Offset Storage Replication Factor",
              "inputType": "string",
              "required": "false",
              "helpTip": "Replication factor used when creating the offset storage topic. Required when offset.storage is set to the <…>.KafkaOffsetBackingStore."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "database.hostname",
              "displayName": "Database Hostname",
              "inputType": "string",
              "required": "true",
              "helpTip": "IP address or host name of the database server."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "database.port",
              "displayName": "Database Port",
              "inputType": "string",
              "required": "true",
              "helpTip": "Port number (Integer) of the database server."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "database.user",
              "displayName": "Database User",
              "inputType": "string",
              "required": "true",
              "helpTip": "Name of the database user to use when connecting to the database server."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "database.password",
              "displayName": "Database Password",
              "inputType": "string",
              "required": "true",
              "helpTip": "The password to connect to the database. Example: <parameter name=\"database.password\">your_password</parameter> or <parameter name=\"database.password\">{wso2:vault-lookup(password_alias')}</parameter>"
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "database.dbname",
              "displayName": "Database Name",
              "inputType": "string",
              "required": "true",
              "helpTip": "The name of the database that needs to be listened to. *This is applicable only for MySQL, Postgres and Oracle."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "database.instance",
              "displayName": "Database Instance",
              "inputType": "string",
              "required": "false",
              "helpTip": "Specifies the instance name of the SQL Server named instance. *This is applicable only for SQL Server."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "database.names",
              "displayName": "Database Names",
              "inputType": "string",
              "required": "false",
              "helpTip": "The comma-separated list of the SQL Server database names from which to stream the changes. *This is applicable only for SQL Server."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "database.server.id",
              "displayName": "Database Server ID",
              "inputType": "string",
              "required": "false",
              "helpTip": "A numeric ID of this database client, which must be unique across all currently-running database processes in the MySQL cluster. *This is applicable only for MySQL."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "table.include.list",
              "displayName": "Table Include List",
              "inputType": "string",
              "required": "false",
              "helpTip": "The list of tables from the selected database that the changes for them need to be captured. Example: <parameter name=\"table.include.list\">inventory.products</parameter>. By default, all operations are listened to."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "allowed.operations",
              "displayName": "Allowed Operations",
              "inputType": "string",
              "required": "false",
              "helpTip": "Operations that the user needs to listen to, in the specified database tables. Should provide comma separated values for create/update/delete/truncate. By default, truncate operations are skipped."
            }
          },
          {
            "type": "attribute",
            "value": {
              "name": "database.out.server.name",
              "displayName": "Database Out Server Name",
              "inputType": "string",
              "required": "false",
              "helpTip": "Name of the XStream outbound server configured in the database. *Only applicable if you are using Oracle database."
            }
          }
        ]
      }
    }
  ]
}
